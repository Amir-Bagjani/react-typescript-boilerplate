{
    "compilerOptions": {
      "target": "es5", /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */
      "lib": [
        "dom",
        "dom.iterable",
        "esnext"
      ], /* Specify library files to be included in the compilation. */
      "allowJs": true,/* Allow javascript files to be compiled. Useful when migrating JS to TS */
      "checkJs": true, /* Report errors in .js files. Works in tandem with allowJs. */
      "skipLibCheck": true, /* Skip type checking of declaration files. */
      "esModuleInterop": true, /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
      "allowSyntheticDefaultImports": true, /*  allows you to write an import like import React from "react"; instead of import * as React from "react";*/
      "strict": true, /* Enable all strict type-checking options. */
      "forceConsistentCasingInFileNames": true,  /* Disallow inconsistently-cased references to the same file. */
      "noFallthroughCasesInSwitch": true, /* Report errors for fallthrough cases in switch statements. Ensures that any non-empty case inside a switch statement includes either break or return. This means you won’t accidentally ship a case fallthrough bug.*/
      "module": "esnext", /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */
      "moduleResolution": "node", /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */ /* Type declaration files to be included in compilation. */
      "resolveJsonModule": true, /* Allows importing modules with a ‘.json’ extension, which is a common practice in node projects. This includes generating a type for the import based on the static JSON shape.*/
      "isolatedModules": true, /* Transpile each file as a separate module */
      "noEmit": true, /* Do not emit outputs. */
      "jsx": "react-jsx", /* Specify JSX code generation: 'preserve', 'react-native', 'react' or 'react-jsx'. */
    },
    "include": ["src/**/*"]
  }
  